---
title: "Design of Experiments"
subtitle: "Playing with numbers"
author: "Pedro J. Aphalo"
date: "2023-11-19"
date-modified: "2023-11-20"
format: html
server: shiny
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, fig.width = 6, fig.height = 5)
```

```{r, message=FALSE}
library(ggplot2)
library(ggpmisc)
```

# Simulated experiments

- Generating artificial data by random sampling of a theoretical density distribution, here the Normal distribution, we can simulate different experiments to learn how  outcomes of real experiments depend on how we design them.

- We will use "Apps" that run interactively through a web browser interface, within this page.

- Today you will learn broad patterns, and we will worry later in the course about the details.

- The idea is for you to start developing an understanding of how to interpret results from data analysis, as well as of gauging by looking at plot very roughly what to expect.

- In some cases parameter estimates and results from significance tests are shown. The main point today is not to understand them in detail, but do pay attention how estimates for the values of the parameters vary in succesive simulations sampled using exactly the same settings.

# 1. How do sampled data look as population parameters change?

In this App, you can change settings related to the simulated data:

- The mean of the Control Normal distribution is constant at zero.
- You can choose the value of the mean for Treatment.
- You can choose the value of the standard deviation (the same value is used for Control and Treatment).
- You can choose the size of samples ($\approx$ number of replicates).

You can also change settings related to how the outcomes of the simulations are displayed:

- The type of plot:
  a.  "density" shows simulated observations as rug plots on the $x$ axis, fitted _sample_ 
  empirical distributions density functions and the _population_ means (the settings above) as blue vertical lines.
  b.  "histogram" shows histograms instead of the fitted density function.
- The minimum limits of the x-axis, which makes it easier to compare simulations using different settings for standard deviation.

- **To do:** Run **15** or more simulations with the same settings.
    * observe how the sample mean and sd change when you:
- Keep constant the standard deviation of the populations sampled.
    * change the Treatment effect size.
- Keep the Treatment effect size constant.
    * change the standard deviation of the populations sampled.
- Keep the Treatment effect size and the standard deviation constant.
    * change number of replicates.

```{r}
#| context: setup
library(ggplot2)
library(ggpmisc)
library(ggpp)
library(broom)
library(ggbeeswarm)
library(Hmisc)
```

```{r sampling1, cache=FALSE}
selectInput("mean_treat", label = "Mean of 'Treatment':",
            choices = c(0.001, 0.01, 0.1, 1, 10, 100), selected = 10)

sliderInput("sd_adjust", label = "Standard deviation:",
            min = 0.2, max = 10, value = 1, step = 0.2)

selectInput("n_replicates", label = "Number of replicates:",
            choices = c(10, 20, 40, 100, 1000, 10000), selected = 100)

selectInput("plot_type", label = "Plot type:",
            choices = c("density", "histogram"), selected = "density")

sliderInput("expand_xlim", label = "x-axis minimum limits:",
            min = 0, max = 50, value = 40, step = 1)

actionButton("refresh", "New simulation")

plotOutput("samplingPlot", height = "500px")
```

```{r sampling2, cache=FALSE}
#| context: server
generate_samples <- function() {
  num_replicates <- as.numeric(input$n_replicates)
  num_mean <- as.numeric(input$mean_treat)
  y <- c(rnorm(n = num_replicates, mean = 0, sd = input$sd_adjust),
         rnorm(n = num_replicates, mean = num_mean, sd = input$sd_adjust))
  group <- factor(rep(c("Control", "Treatment"), rep(num_replicates, 2)))
  data.frame(y, group)
} 

output$samplingPlot <- renderPlot({
  ggplot(generate_samples(), aes(y, colour = group, fill = group)) +
    geom_vline(xintercept = c(0, as.numeric(input$mean_treat)), 
               linetype = "dotted", color = "blue") +
    geom_rug() +
    switch(input$plot_type,
           density = geom_density(linewidth = 1, alpha = 0.2),
           histogram = geom_histogram(aes(y = after_stat(density)),
                                      linewidth = 1, alpha = 0.2, 
                                      position = "identity")) +
    annotate(x = 1.5, y = 0, label = input$refresh, alpha = 0, geom = "text") +
#    scale_x_continuous(limits = function(x) {x + (diff(x) * 0.1) * c(-1,1)}) +
    expand_limits(x = c(-input$expand_xlim, input$expand_xlim + as.numeric(input$mean_treat))) +
    stat_group_counts(size = 6) +
    labs(x = "Draws from two Normal distributions",
         y = "Estimated density\n(Area for each group equal to one)") +
    theme_bw(20)
})
```


# 2. Sample summaries

Here you should pay attention to the difference between the mean of the Normal population from which the sample was drawn and the mean estimated from the sample. You should also pay attention to the difference between the standard deviation of the Normal population from which the sample was drawn and the standard deviation estimated from the sample.

- **To do:** Run **15** or more simulations with the same settings.
    * observe how the sample mean and sd change when you:
- Keep constant the standard deviation of the populations sampled.
    * change the Treatment effect size.
- Keep the Treatment effect size constant.
    * change the standard deviation of the populations sampled.
- Keep the Treatment effect size and the standard deviation constant.
    * change number of replicates.
    
You can next select to have the _t_-test shown, and repeat the exercise above paying attention to whether the conclusion you would draw from the _t_-test vary among simulations done using the same settings.

```{r summaries1, cache=FALSE}
selectInput("mean_treat1", label = "Mean of 'Treatment':",
            choices = c(0.001, 0.01, 0.1, 1, 10, 100), selected = 1)

selectInput("n_replicates1", label = "Number of replicates:",
            choices = c(3, 5, 10, 20, 40, 100, 1000, 10000), selected = 10)

sliderInput("sd_adjust1", label = "Standard deviation:",
            min = 0.2, max = 10, value = 1, step = 0.2)

checkboxInput("disp_ttest", label = "t-test", value = FALSE)

actionButton("refresh1", "New simulation")

verbatimTextOutput("summaries")
```

```{r summaries2, cache=FALSE}
#| context: server
output$summaries <- renderPrint({
  num_replicates <- as.numeric(input$n_replicates1)
  num_mean <- as.numeric(input$mean_treat1)
  y <- c(rnorm(n = num_replicates, mean = 0, sd = input$sd_adjust1),
         rnorm(n = num_replicates, mean = num_mean, sd = input$sd_adjust1))
  group <- factor(rep(c("Control", "Treatment"), rep(num_replicates, 2)))
  df <- data.frame(y, group)
  if (input$disp_ttest) {
    t.test(y ~ group, data = df)
  } else {
    data.frame(group = c("Control", "Treatment"),
               n = num_replicates,
               pop.mean = c(0, num_mean),
               samp.mean = signif(c(mean(df[df$group == "Control", "y"]),
                                    mean(df[df$group == "Treatment", "y"])), 3),
               pop.sd = input$sd_adjust1,
               samp.sd = signif(c(sd(df[df$group == "Control", "y"]),
                                  sd(df[df$group == "Treatment", "y"])), 3),
               simulation = rep(input$refresh1[1], 2)
    )
  }
})

```

# 3. Simulation experiment: ANOVA

- **To do:** For each condition run **15** or more simulations.
    * consider if a non-significant _p_-value demonstrate lack of treatment effect or not.
- Keep constant the standard deviation of the populations sampled.
    * change the Treatment effect size.
- Keep the Treatment effect size constant.
    * change number of replicates and see how this affects the _p_-value and the plotted standard error. (In this case you will need to use different plot types for different numbers of replicates.) 
- Keep the Treatment effect size constant.
    * change the standard deviation of the populations sampled.
    
**In the plot the error bars show mean plus and minus one standard error.**
    
- What can you conclude from a significant _P_-value?
- Can you conclude something more than "significant effect"?

```{r replication1, cache=FALSE}
selectInput("mean_treat2", label = "Mean of 'Treatment':",
            choices = c(0.001, 0.01, 0.1, 1, 10, 100), selected = 1)

selectInput("n_replicates2", label = "Number of replicates:",
            choices = c(3, 5, 10, 20, 40, 100, 1000, 10000), selected = 10)

sliderInput("sd_adjust2", label = "Standard deviation:",
            min = 0.2, max = 10, value = 1, step = 0.2)

actionButton("refresh2", "New simulation")

selectInput("plot_type2", label = "Plot type:",
            choices = c("dot plot", 
                        "violin plot", 
                        "beeswarm plot",
                        "box plot"), selected = "beeswarm plot")

plotOutput("replicationPlot", height = "500px")
```

```{r replication2, cache=FALSE}
#| context: server
generate_data <- function() {
  num_replicates <- as.numeric(input$n_replicates2)
  num_mean <- as.numeric(input$mean_treat2)
  y <- c(rnorm(n = num_replicates, mean = 0, sd = input$sd_adjust2),
         rnorm(n = num_replicates, mean = num_mean, sd = input$sd_adjust2))
  x <- factor(rep(c("Control", "Treatment"), rep(num_replicates, 2)))
  data.frame(y, x)
} 

output$replicationPlot <- renderPlot({
  ggplot(generate_data(), aes(x, y)) +
    switch(input$plot_type2,
           "dot plot" = geom_point(alpha = 0.25, size = 3),
           "violin plot" = geom_violin(fill = "grey50", 
                                       linewidth = 1, 
                                       alpha = 0.2),
           "beeswarm plot" = geom_beeswarm(color = "grey50"),
           "box plot" = geom_boxplot(fill = "grey50", 
                                     linewidth = 1, 
                                     alpha = 0.2,
                                     width = 0.2)) +
    stat_summary(fun.data = "mean_se", color = "red",
                 size = 1, linewidth = 1, alpha = 0.67) +
    geom_hline(yintercept = c(0, as.numeric(input$mean_treat2)), 
               linetype = "dotted", color = "blue", linewidth = 1) +
    stat_fit_tb(tb.type = "fit.anova", size = 5,
                digits = 3,
                p.digits = 4,
                tb.params = c("Group" = 1, "Error" = 2),
                tb.vars = c("Effect" = 1, "df" = 2, SS = 3,
                            MS = 4, "italic(F)" = 5,
                            "italic(P)" = 6),
                parse = TRUE) +
    annotate(x = 1.5, y = 0, label = input$refresh2, alpha = 0, geom = "text") +
    labs(x = "Group", y = "Observed values") +
    theme_bw(20)
})

```

# 4. Simulation experiment: linear regression

- **To do:** For each condition run **15** or more simulations.
    * observe how statistical significance and $R^2$ vary when you:
- Keep constant the standard deviation of the populations sampled.
    * change the slope size.
    * change the intercept size.
- Keep the slope size constant.
    * change the standard deviation of the populations sampled.
- Keep the Treatment effect size and the standard deviation constant.
    * change number of replicates.

```{r lm2a, cache=FALSE}
selectInput("num_intercept4", label = "Intercept:",
            choices = c(-10, -1, -0.1, 0, 0.1, 1, 10), selected = 0)

selectInput("num_slope4", label = "Slope of resp. to x:",
            choices = c(-1, -0.1, 0, 0.1, 1), selected = 0.1)

selectInput("num_observations4", label = "n data:",
            choices = c(5, 10, 25, 50, 100, 1000, 10000), selected = 100)

sliderInput("sd_adjust4", label = "s.d.:",
            min = 0, max = 10, value = 1, step = 0.2)

checkboxInput("disp_equation4", label = "Equation", value = TRUE)

actionButton("refresh4", "New simulation")

plotOutput("lm2plot", height = "500px")
```

```{r lm2b, cache=FALSE}
#| context: server
generate_data4 <- function() {
  num_observations <- as.integer(input$num_observations4)
  num_slope <- as.numeric(input$num_slope4)
  num_intercept <- as.numeric(input$num_intercept4)
  x <- seq(from = 0, to = 50, length.out = num_observations)
  y <- num_intercept + x * num_slope + 
    c(rnorm(n = num_observations, mean = 0, sd = input$sd_adjust4))
  data.frame(x, y)
} 

output$lm2plot <- renderPlot({
      p <-
        ggplot(generate_data4(), aes(x, y)) +
        geom_point(alpha = 0.25) +
        geom_abline(intercept = as.numeric(input$num_intercept4), 
                    slope = as.numeric(input$num_slope4), 
                    linetype = "dotted", color = "blue", linewidth = 1) +
        geom_rug(alpha = 0.1) +
        geom_smooth(method = "lm", formula = y ~ x, linewidth = 1) +
        scale_x_continuous(name = "Dose, x") +
        scale_y_continuous(name = "Response, y", expand = expansion(c(0.05, 0.21))) +
        annotate(x = 1.5, y = 0, label = input$refresh4, alpha = 0, geom = "text") +
        theme_bw(20)
      
      if (input$disp_equation4) {
        p + stat_poly_eq(use_label(c("eq", "R2", "F", "P", "n")), 
                         formula = y ~ x, parse = TRUE, size = 6, label.x = "center")
      } else {
        p + stat_fit_tb(label.x = "center", label.y = 1, size = 5)
      }
    })
```

# How did I create these interactive App?

This Quarto presentation is made interactive using Shiny, an R package. The viewers of the presentation can change the values of parameters underlying what's computed and displayed and see the results immediately. 

To learn more, see [Interactive Documents](http://rmarkdown.rstudio.com/authoring_shiny.html).

